diff --git a/node_modules/react-native/Libraries/Core/InitializeCore.js b/node_modules/react-native/Libraries/Core/InitializeCore.js
index f01d96e..cf64e4c 100644
--- a/node_modules/react-native/Libraries/Core/InitializeCore.js
+++ b/node_modules/react-native/Libraries/Core/InitializeCore.js
@@ -28,6 +28,15 @@

 const start = Date.now();

+if (global.window === undefined) {
+  // If we don't do this here, there will be a race condition in node_modules/react-native-crypto because setUpSES blocks the execution with react-native-mmkv causing `window` to not be available and getRandomValues won't be added to it, causing a crash.
+  global.window = global;
+}
+
+// setUpSES should be imported after setUpXHR because setUpXHR adds AbortController:
+require('./setUpXHR');
+require('./setUpSES');
+
 require('./setUpGlobals');
 require('../../src/private/setup/setUpDOM').default();
 require('./setUpPerformance');
@@ -35,7 +44,6 @@ require('./setUpErrorHandling');
 require('./polyfillPromise');
 require('./setUpRegeneratorRuntime');
 require('./setUpTimers');
-require('./setUpXHR');
 require('./setUpAlert');
 require('./setUpNavigator');
 require('./setUpBatchedBridge');
diff --git a/node_modules/react-native/Libraries/Core/setUpSES.js b/node_modules/react-native/Libraries/Core/setUpSES.js
new file mode 100644
index 0000000..68f1c6b
--- /dev/null
+++ b/node_modules/react-native/Libraries/Core/setUpSES.js
@@ -0,0 +1,54 @@
+import { MMKV } from 'react-native-mmkv';
+import { SHOULD_ENABLE_SES_STORAGE_KEY } from '../../../../src/constants';
+
+const storage = new MMKV();
+
+let isSesEnabled = storage.getBoolean(SHOULD_ENABLE_SES_STORAGE_KEY);
+
+// Enable SES by default
+if (isSesEnabled === undefined) {
+  isSesEnabled = true;
+  storage.set(SHOULD_ENABLE_SES_STORAGE_KEY, true);
+}
+
+const Platform = require('../Utilities/Platform');
+
+// This piece of code was taken from these PRs:
+// - https://github.com/MetaMask/metamask-mobile/pull/6586/files
+// - https://github.com/MetaMask/metamask-mobile/pull/13771
+// which is the reference implementation of SES On react-native
+if (Platform.OS === 'ios' && isSesEnabled) {
+  console.log(`Will import Lockdown for SES on setUpSES.js`);
+  require('../../../../lockdown.umd.cjs');
+  console.log(`Lockdown imported for SES on setUpSES.js`);
+
+  /**
+   * Without consoleTaming: 'unsafe' causes:
+   * - Attempting to define property on object that is not extensible.
+   * Without errorTrapping 'none' causes:
+   * - TypeError: undefined is not a function (near '...globalThis.process.on...')
+   * Without unhandledRejectionTrapping 'none' causes:
+   * - TypeError: globalThis.process.on is not a function. (In 'globalThis.process.on('unhandledRejection', h.unhandledRejectionHandler)', 'globalThis.process.on' is undefined)
+   * overrideTaming 'severe' is ideal (default override?)
+   * Nb: global.process is only partially shimmed, which confuses SES
+   * Nb: All are Unhandled JS Exceptions, since we call lockdown before setUpErrorHandling
+   */
+  console.log(`Will repair intrinsics on setUpSES.js`);
+  try {
+    repairIntrinsics({
+      errorTaming: 'unsafe',
+      consoleTaming: 'unsafe',
+      errorTrapping: 'none',
+      unhandledRejectionTrapping: 'none',
+      overrideTaming: 'severe',
+      stackFiltering: "verbose",
+      reporting: 'none',
+    });
+    console.log(`Intrinsics repaired on setUpSES.js`);
+
+    hardenIntrinsics();
+  } catch (e) {
+    console.error(`Error repairing/hardening intrinsics on setUpSES.js: ${ e.message }`);
+    throw e;
+  }
+}
