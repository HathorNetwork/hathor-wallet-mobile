#!/bin/bash

PACKAGE_VERSION=`grep '"version":' ./package.json | cut -d '"' -f4`
ANDROID_GRADLE_VERSION=`grep "versionName " ./android/app/build.gradle | cut -d '"' -f2`
TEMP_IOS_VAR=`perl -n -e '/MARKETING_VERSION = (.*);/ && print "$1\n"' ./ios/HathorMobile.xcodeproj/project.pbxproj`
TEMP_IOS_PROJECT_VERSION=`perl -n -e '/CURRENT_PROJECT_VERSION = (.*);/ && print "$1\n"' ./ios/HathorMobile.xcodeproj/project.pbxproj`
IOS_MARKETING_VERSION_1=`echo $TEMP_IOS_VAR | awk '{print $1}'`
IOS_MARKETING_VERSION_2=`echo $TEMP_IOS_VAR | awk '{print $2}'`
IOS_PROJECT_VERSION_1=`echo $TEMP_IOS_PROJECT_VERSION | awk '{print $1}'`
IOS_PROJECT_VERSION_2=`echo $TEMP_IOS_PROJECT_VERSION | awk '{print $2}'`

# This will read everything of the string up to the first dash.
STRIPPED_PACKAGE_VERSION=$(echo $PACKAGE_VERSION| cut -d- -f1);
if [[ "$PACKAGE_VERSION" == *-* ]]; then
  STRIPPED_PACKAGE_CANDIDATE=$(echo $PACKAGE_VERSION | cut -d- -f2)
else
  STRIPPED_PACKAGE_CANDIDATE=""
fi

# For debugging:
 echo package: x${PACKAGE_VERSION}x
 echo stripped: x${STRIPPED_PACKAGE_VERSION}x
 echo stripped rc: x${STRIPPED_PACKAGE_CANDIDATE}x
 echo android: x${ANDROID_GRADLE_VERSION}x
 echo ios mv1: x${IOS_MARKETING_VERSION_1}x
 echo ios mv2: x${IOS_MARKETING_VERSION_2}x
 echo ios pv1: x${IOS_PROJECT_VERSION_1}x
 echo ios pv2: x${IOS_PROJECT_VERSION_2}x

EXITCODE=0

if [[ x${PACKAGE_VERSION}x != x${ANDROID_GRADLE_VERSION}x ]]; then
	echo Version different in package.json \($PACKAGE_VERSION\) and android/app/build.gradle
	EXITCODE=-1
fi

if [[ x${STRIPPED_PACKAGE_VERSION}x != x${IOS_MARKETING_VERSION_1}x ]]; then
  echo Version different in package.json \($PACKAGE_VERSION\) and first MARKETING_VERSION \($IOS_MARKETING_VERSION_1\) on ios/HathorMobile.xcodeproj/project.pbxproj
	EXITCODE=-1
fi

if [[ x${STRIPPED_PACKAGE_VERSION}x != x${IOS_MARKETING_VERSION_2}x ]]; then
	echo Version different in package.json \($PACKAGE_VERSION\) and second MARKETING_VERSION \($IOS_MARKETING_VERSION_2\) on ios/HathorMobile.xcodeproj/project.pbxproj
	EXITCODE=-1
fi

# This will check the format of IOS' CURRENT_PROJECT_VERSION
if [ -z "$STRIPPED_PACKAGE_CANDIDATE" ]; then
  # If this is a release version, check that the CURRENT_PROJECT_VERSION is 1.0.0
  if [[ ! "$IOS_PROJECT_VERSION_1" =~ ^1\.0\.0$ ]]; then
      echo "Invalid format (expected 1.0.0) for first CURRENT_PROJECT_VERSION (${IOS_PROJECT_VERSION_1}) on ios/HathorMobile.xcodeproj/project.pbxproj"
  fi

  if [[ ! "$IOS_PROJECT_VERSION_2" =~ ^1\.0\.0$ ]]; then
      echo "Invalid format (expected 1.0.0) for second CURRENT_PROJECT_VERSION (${IOS_PROJECT_VERSION_2}) on ios/HathorMobile.xcodeproj/project.pbxproj"
  fi
else
  # If this is a release candidate version, check that the CURRENT_PROJECT_VERSION is 0.rc.0
  RCVERSION=${STRIPPED_PACKAGE_CANDIDATE//[^0-9]/}
  echo "RCVERSION: $RCVERSION"
  if [[ x${IOS_PROJECT_VERSION_1}x != x0.${RCVERSION}.0x ]]; then
      echo "Invalid format (expected 0.$RCVERSION.0) for first CURRENT_PROJECT_VERSION (${IOS_PROJECT_VERSION_1}) on ios/HathorMobile.xcodeproj/project.pbxproj"
      EXITCODE=-1
  fi

  if [[ x${IOS_PROJECT_VERSION_2}x != x0.${RCVERSION}.0x ]]; then
      echo "Invalid format (expected 0.$RCVERSION.0) for first CURRENT_PROJECT_VERSION (${IOS_PROJECT_VERSION_2}) on ios/HathorMobile.xcodeproj/project.pbxproj"
      EXITCODE=-1
  fi
fi

exit $EXITCODE
